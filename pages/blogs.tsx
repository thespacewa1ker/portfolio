import { fetchArticles, fetchCategories } from "@/apis";
import ArticleList from "@/components/ArticleList";
import Tabs from "@/components/Tabs";
import { IArticle, ICategory, ICollectionResponse, IPagination, IQueryOptions } from "@/types";
import { AxiosResponse } from "axios";
import { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import React from "react";
import qs from "qs";
import Pagination from "@/components/Pagination";
import { useRouter } from "next/router";
import { debounce } from "@/utils";

interface IPropTypes {
  categories: ICategory[];
  articles: IArticle[];
  paginationItems: {
    pagination:IPagination;
  };
}

const Blogs: NextPage<IPropTypes> = ({ categories, articles, paginationItems }) => {

  const router = useRouter();
  const {page,pageCount} = paginationItems.pagination;
  

  const handleSearch = (query: string) => {
    router.push(`blogs/?search=${query}`);
  };


    return (
        <div>
          <Head>
            <title>Blog-Recent</title>
            <meta name="description" content="Generated by create next app" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <Tabs categories={categories} handleOnSearch={debounce(handleSearch,150)} />
          <ArticleList articles={articles} />
          <Pagination page={page} pageCount={pageCount}/>
    
          <style jsx>{`
            div {
              margin-top: 6rem;
              margin-left:6rem;
              margin-right:6rem;
            }
    
            @media (max-width: 767px) {
              div {
                margin-top: 4rem;
                
              }
            }
          `}</style>
        </div>
      );
};

export const getServerSideProps: GetServerSideProps = async ({query}) => {

  const options:Partial<IQueryOptions> = {
    populate: ["author.avatar", "Image.data.formats"],
    sort: ["id:desc"],
    pagination: {
      page: query.page ? +query.page : 1,
      pageSize: 4,
    }
  };

  if (query.search){
    options.filters = {
      Title:{
        $containsi:query.search,
      }
    }
  }

  const queryString = qs.stringify(options);


  const {
    data: categoryItems,
  }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories();
  const { data: articleItems }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticles(queryString);

  return {
    props: {
      categories: categoryItems.data,
      articles: articleItems.data,
      paginationItems: articleItems.meta,
    },
  };
};

export default Blogs;
