import { AxiosResponse } from "axios";
import React from "react";
import qs from "qs";
import { GetServerSideProps } from "next";
import Head from "next/head";
import { MDXRemote, MDXRemoteSerializeResult } from "next-mdx-remote";
import { IArticle, ICollectionResponse } from "@/types";
import { formatDate, serializeMarkdown } from "@/utils";
import { fetchArticleBySlug } from "@/apis";
import { ReactMarkdown } from "react-markdown/lib/react-markdown";

interface IPropType {
  article: IArticle;
  notFound?: boolean;
}

const slug = ({ article, notFound = false }: IPropType) => {
  return (
    <div className="container">
      <Head>
        <title>{article.attributes.Title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="article-content mt-28">
        <h1 className="text-2xl font-medium text-sky-500 py-2 text-center">
          {article.attributes.Title}
        </h1>

        <div
          className="text-lg text-gray-700 leading-8 mx-auto mt-12 p-4 bg-gray-100 rounded-lg text-justify"
          style={{ maxWidth: "1000px" }}
        >
          {/* <div className="image-container">
            <img
              src={`http://localhost:1337${article.attributes.Image.data[0].attributes.url}`}
              alt={article.attributes.Title}
            />
          </div> */}
          
          <MDXRemote
            {...(article.attributes.body as unknown as MDXRemoteSerializeResult)}
          />
        </div>
      </div>
      <style jsx>{`
        .container {
          margin-top: 12rem;
          margin: 0 auto;
        }

        .article-content {
        
          padding: 2rem 0;
        }

        .image-container {
          max-width: 60%;
          max-height: 30%;
          overflow: hidden;
        }

        .image-container img {
          width: 100%;
          height: auto;
          display: block;
        }
      `}</style>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  const queryString = qs.stringify({
    populate: ["Image", "author.avatar"],
    filters: {
      Slug: {
        $eq: query.slug,
      },
    },
  });

  const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> =
    await fetchArticleBySlug(queryString);
  if (articles.data.length === 0) {
    return {
      notFound: true,
    };
  }
  return {
    props: {
      article: await serializeMarkdown(articles.data[0]),
    },
  };
};

export default slug;
